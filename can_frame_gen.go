package logformat

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CANFrame) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tss":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "TimestampSoftware")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "TimestampSoftware")
					return
				}
				switch msgp.UnsafeString(field) {
				case "s":
					z.TimestampSoftware.Sec, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware", "Sec")
						return
					}
				case "ns":
					z.TimestampSoftware.Nsec, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware", "Nsec")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware")
						return
					}
				}
			}
		case "tsh":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "TimestampHardware")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "TimestampHardware")
					return
				}
				switch msgp.UnsafeString(field) {
				case "s":
					z.TimestampHardware.Sec, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware", "Sec")
						return
					}
				case "ns":
					z.TimestampHardware.Nsec, err = dc.ReadInt32()
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware", "Nsec")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware")
						return
					}
				}
			}
		case "id":
			z.ID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "l":
			z.DLC, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "DLC")
				return
			}
		case "d":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CANFrame) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "tss"
	err = en.Append(0x85, 0xa3, 0x74, 0x73, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "s"
	err = en.Append(0x82, 0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.TimestampSoftware.Sec)
	if err != nil {
		err = msgp.WrapError(err, "TimestampSoftware", "Sec")
		return
	}
	// write "ns"
	err = en.Append(0xa2, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.TimestampSoftware.Nsec)
	if err != nil {
		err = msgp.WrapError(err, "TimestampSoftware", "Nsec")
		return
	}
	// write "tsh"
	err = en.Append(0xa3, 0x74, 0x73, 0x68)
	if err != nil {
		return
	}
	// map header, size 2
	// write "s"
	err = en.Append(0x82, 0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.TimestampHardware.Sec)
	if err != nil {
		err = msgp.WrapError(err, "TimestampHardware", "Sec")
		return
	}
	// write "ns"
	err = en.Append(0xa2, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.TimestampHardware.Nsec)
	if err != nil {
		err = msgp.WrapError(err, "TimestampHardware", "Nsec")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.DLC)
	if err != nil {
		err = msgp.WrapError(err, "DLC")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CANFrame) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "tss"
	o = append(o, 0x85, 0xa3, 0x74, 0x73, 0x73)
	// map header, size 2
	// string "s"
	o = append(o, 0x82, 0xa1, 0x73)
	o = msgp.AppendInt32(o, z.TimestampSoftware.Sec)
	// string "ns"
	o = append(o, 0xa2, 0x6e, 0x73)
	o = msgp.AppendInt32(o, z.TimestampSoftware.Nsec)
	// string "tsh"
	o = append(o, 0xa3, 0x74, 0x73, 0x68)
	// map header, size 2
	// string "s"
	o = append(o, 0x82, 0xa1, 0x73)
	o = msgp.AppendInt32(o, z.TimestampHardware.Sec)
	// string "ns"
	o = append(o, 0xa2, 0x6e, 0x73)
	o = msgp.AppendInt32(o, z.TimestampHardware.Nsec)
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.ID)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendUint8(o, z.DLC)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CANFrame) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tss":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimestampSoftware")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimestampSoftware")
					return
				}
				switch msgp.UnsafeString(field) {
				case "s":
					z.TimestampSoftware.Sec, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware", "Sec")
						return
					}
				case "ns":
					z.TimestampSoftware.Nsec, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware", "Nsec")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampSoftware")
						return
					}
				}
			}
		case "tsh":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimestampHardware")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimestampHardware")
					return
				}
				switch msgp.UnsafeString(field) {
				case "s":
					z.TimestampHardware.Sec, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware", "Sec")
						return
					}
				case "ns":
					z.TimestampHardware.Nsec, bts, err = msgp.ReadInt32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware", "Nsec")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimestampHardware")
						return
					}
				}
			}
		case "id":
			z.ID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "l":
			z.DLC, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DLC")
				return
			}
		case "d":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CANFrame) Msgsize() (s int) {
	s = 1 + 4 + 1 + 2 + msgp.Int32Size + 3 + msgp.Int32Size + 4 + 1 + 2 + msgp.Int32Size + 3 + msgp.Int32Size + 3 + msgp.Uint32Size + 2 + msgp.Uint8Size + 2 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Timespec) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Sec, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Sec")
				return
			}
		case "ns":
			z.Nsec, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Nsec")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Timespec) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "s"
	err = en.Append(0x82, 0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Sec)
	if err != nil {
		err = msgp.WrapError(err, "Sec")
		return
	}
	// write "ns"
	err = en.Append(0xa2, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Nsec)
	if err != nil {
		err = msgp.WrapError(err, "Nsec")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Timespec) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "s"
	o = append(o, 0x82, 0xa1, 0x73)
	o = msgp.AppendInt32(o, z.Sec)
	// string "ns"
	o = append(o, 0xa2, 0x6e, 0x73)
	o = msgp.AppendInt32(o, z.Nsec)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Timespec) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Sec, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sec")
				return
			}
		case "ns":
			z.Nsec, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nsec")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Timespec) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 3 + msgp.Int32Size
	return
}
