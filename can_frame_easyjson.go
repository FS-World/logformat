// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package logformat

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2e372ef2DecodeGithubComFsWorldLogformat(in *jlexer.Lexer, out *Timespec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Sec = int32(in.Int32())
		case "ns":
			out.Nsec = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2e372ef2EncodeGithubComFsWorldLogformat(out *jwriter.Writer, in Timespec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Sec))
	}
	{
		const prefix string = ",\"ns\":"
		out.RawString(prefix)
		out.Int32(int32(in.Nsec))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timespec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2e372ef2EncodeGithubComFsWorldLogformat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timespec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2e372ef2EncodeGithubComFsWorldLogformat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timespec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2e372ef2DecodeGithubComFsWorldLogformat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timespec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2e372ef2DecodeGithubComFsWorldLogformat(l, v)
}
func easyjson2e372ef2DecodeGithubComFsWorldLogformat1(in *jlexer.Lexer, out *CANFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tss":
			(out.TimestampSoftware).UnmarshalEasyJSON(in)
		case "tsh":
			(out.TimestampHardware).UnmarshalEasyJSON(in)
		case "id":
			out.ID = uint32(in.Uint32())
		case "l":
			out.DLC = uint8(in.Uint8())
		case "d":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2e372ef2EncodeGithubComFsWorldLogformat1(out *jwriter.Writer, in CANFrame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tss\":"
		out.RawString(prefix[1:])
		(in.TimestampSoftware).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"tsh\":"
		out.RawString(prefix)
		(in.TimestampHardware).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DLC))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CANFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2e372ef2EncodeGithubComFsWorldLogformat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CANFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2e372ef2EncodeGithubComFsWorldLogformat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CANFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2e372ef2DecodeGithubComFsWorldLogformat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CANFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2e372ef2DecodeGithubComFsWorldLogformat1(l, v)
}
